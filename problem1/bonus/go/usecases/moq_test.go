// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecases

import (
	"problem1/domain"
	"sync"
)

// Ensure, that UserRepositoryMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			GetByIDFunc: func(id int, db domain.Queryer) (domain.User, error) {
//				panic("mock out the GetByID method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id int, db domain.Queryer) (domain.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID int
			// Db is the db argument value.
			Db domain.Queryer
		}
	}
	lockGetByID sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *UserRepositoryMock) GetByID(id int, db domain.Queryer) (domain.User, error) {
	if mock.GetByIDFunc == nil {
		panic("UserRepositoryMock.GetByIDFunc: method is nil but UserRepository.GetByID was just called")
	}
	callInfo := struct {
		ID int
		Db domain.Queryer
	}{
		ID: id,
		Db: db,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id, db)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedUserRepository.GetByIDCalls())
func (mock *UserRepositoryMock) GetByIDCalls() []struct {
	ID int
	Db domain.Queryer
} {
	var calls []struct {
		ID int
		Db domain.Queryer
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Ensure, that UserGetterMock does implement UserGetter.
// If this is not the case, regenerate this file with moq.
var _ UserGetter = &UserGetterMock{}

// UserGetterMock is a mock implementation of UserGetter.
//
//	func TestSomethingThatUsesUserGetter(t *testing.T) {
//
//		// make and configure a mocked UserGetter
//		mockedUserGetter := &UserGetterMock{
//			GetByIDFunc: func(id int, db domain.Queryer) (domain.User, error) {
//				panic("mock out the GetByID method")
//			},
//		}
//
//		// use mockedUserGetter in code that requires UserGetter
//		// and then make assertions.
//
//	}
type UserGetterMock struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id int, db domain.Queryer) (domain.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID int
			// Db is the db argument value.
			Db domain.Queryer
		}
	}
	lockGetByID sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *UserGetterMock) GetByID(id int, db domain.Queryer) (domain.User, error) {
	if mock.GetByIDFunc == nil {
		panic("UserGetterMock.GetByIDFunc: method is nil but UserGetter.GetByID was just called")
	}
	callInfo := struct {
		ID int
		Db domain.Queryer
	}{
		ID: id,
		Db: db,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id, db)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedUserGetter.GetByIDCalls())
func (mock *UserGetterMock) GetByIDCalls() []struct {
	ID int
	Db domain.Queryer
} {
	var calls []struct {
		ID int
		Db domain.Queryer
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}
